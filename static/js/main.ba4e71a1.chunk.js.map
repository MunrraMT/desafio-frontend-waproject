{"version":3,"sources":["components/home-title.js","providers/data-context.js","components/how-many-questions.js","components/review-report.js","pages/home-page.js","components/start-quest.js","pages/start-quest-page.js","routes/start-quest-route.js","components/btn-send-answers.js","utils/number-random.js","utils/number-formater.js","components/questions-formik.js","pages/questions-page.js","routes/questions-route.js","components/show-ponctuations.js","components/btn-return-init.js","components/report-questions.js","pages/report-page.js","routes/report-route.js","routes.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","paperTitleApp","backgroundColor","boxTitleApp","marginTop","width","HomeTitle","classes","Box","className","Paper","variant","Typography","align","component","DataContext","createContext","numberQuestions","started","questionsData","DataProvider","props","useState","setNumberQuestions","setStarted","setQuestionsData","Provider","value","children","cardQuestNumber","btnStartQuestion","boxQuestNumber","HowManyQuestions","numberOfQuestionsChosen","setNumberOfQuestionsChosen","context","useContext","history","useHistory","m","Card","CardContent","CardActions","Grid","container","direction","alignContent","justifyContent","alignItems","Fab","size","color","aria-label","data-testid","onClick","Number","Button","push","cardReviewReport","boxReviewReport","ReviewReport","goLastReport","lastReport","JSON","parse","localStorage","getItem","fullWidth","disabled","showBtn","HomePage","btnStartCancel","boxStartCancel","StartQuest","getDataApi","inOut","a","url","axios","get","then","data","results","catch","e","console","log","saveInContext","btnStartQuests","StartQuestPage","StartQuestRoute","rest","valid","to","boxSendAnswers","marginBottom","cardSendAnswers","BtnSendAnswers","type","numberRandom","min","Math","floor","random","idFormater","id","answerGrid","marginLeft","answerRadioGroup","btnSendAnswers","margin","avatarQuestion","errorMsg","textAlign","boxListQuestions","Questions","listAnswersFormated","question","questionID","correctAnswer","incorrectAnswers","sort","map","answer","FormControlLabel","control","Radio","label","initialValues","quetionsList","index","questionList","onSubmit","values","setItem","stringify","validate","erros","key","handleSubmit","FormControl","questionFormated","CardHeader","avatar","Avatar","title","difficulty","toLocaleUpperCase","subheader","category","FormLabel","gutterBottom","RadioGroup","onChange","event","setFieldValue","currentTarget","onBlur","handleBlur","name","errors","touched","QuestionsPage","QuestsRoute","showPonctuations","boxShowPonctuantions","correctPoints","wrongPoints","ShowPonctuations","boxReturnInit","cardReturnInit","BtnReturnInit","wrongAnswer","display","icon","marginRight","ReportQuestions","questionsLoad","answersLoad","acertos","forEach","answerID","questions","ReportPage","ReportRoute","answers","Routes","exact","path","App","spacing","style","minHeight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba4e71a1.chunk.js","sourcesContent":["import { Box, Paper, Typography, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  paperTitleApp: {\n    backgroundColor: '#ededed !important',\n  },\n  boxTitleApp: {\n    marginTop: '0.5rem !important',\n    '@media(min-width: 900px)': {\n      width: '60vw !important',\n    },\n  },\n});\n\nconst HomeTitle = () => {\n  const classes = useStyles();\n\n  return (\n    <header>\n      <Box width=\"90vw\" className={`${classes.boxTitleApp} box-title-app`}>\n        <Paper variant=\"outlined\" className={classes.paperTitleApp}>\n          <Typography align=\"center\" variant=\"h4\" component=\"h1\">\n            Desafio Front End\n          </Typography>\n        </Paper>\n      </Box>\n    </header>\n  );\n};\n\nexport default HomeTitle;\n","import { useState } from 'react';\nimport { createContext } from 'react';\n\nexport const DataContext = createContext({\n  numberQuestions: 0,\n  started: false,\n  questionsData: [],\n});\n\nexport const DataProvider = (props) => {\n  const [numberQuestions, setNumberQuestions] = useState(0);\n  const [started, setStarted] = useState(false);\n  const [questionsData, setQuestionsData] = useState([]);\n\n  return (\n    <DataContext.Provider\n      value={{\n        numberQuestions,\n        setNumberQuestions,\n        started,\n        setStarted,\n        questionsData,\n        setQuestionsData,\n      }}\n    >\n      {props.children}\n    </DataContext.Provider>\n  );\n};\n","import {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  CardActions,\n  Fab,\n  Button,\n  makeStyles,\n} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport { useState, useContext } from 'react';\nimport { DataContext } from '../providers/data-context';\nimport { useHistory } from 'react-router-dom';\n\nconst useStyles = makeStyles({\n  cardQuestNumber: {\n    backgroundColor: '#ededed !important',\n  },\n  btnStartQuestion: {\n    marginTop: '1rem !important',\n  },\n  boxQuestNumber: {\n    '@media(min-width: 900px)': {\n      width: '60vw !important',\n    },\n  },\n});\n\nconst HowManyQuestions = () => {\n  const classes = useStyles();\n  const [numberOfQuestionsChosen, setNumberOfQuestionsChosen] = useState(5);\n\n  const context = useContext(DataContext);\n  const history = useHistory();\n\n  const saveInContext = () => {\n    context.setNumberQuestions(numberOfQuestionsChosen);\n  };\n\n  const selectedNumber = () => {\n    saveInContext();\n    history.push('/start');\n  };\n\n  const addNumberOfQuestion = () => {\n    if (numberOfQuestionsChosen >= 10) {\n      return setNumberOfQuestionsChosen(10);\n    }\n    setNumberOfQuestionsChosen(Number(numberOfQuestionsChosen) + 1);\n  };\n\n  const removeNumberOfQuestion = () => {\n    if (numberOfQuestionsChosen <= 1) {\n      return setNumberOfQuestionsChosen(1);\n    }\n    setNumberOfQuestionsChosen(Number(numberOfQuestionsChosen) - 1);\n  };\n\n  return (\n    <Box m=\"1rem\" width=\"90vw\" className={classes.boxQuestNumber}>\n      <Card className={classes.cardQuestNumber} variant=\"outlined\">\n        <CardContent>\n          <Typography align=\"center\" variant=\"h5\" component=\"h2\">\n            Quantas perguntas deseja responder?\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Grid\n            container\n            direction=\"column\"\n            alignContent=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Grid\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"space-around\"\n            >\n              <Fab\n                variant=\"extended\"\n                size=\"small\"\n                color=\"primary\"\n                aria-label=\"add\"\n                data-testid=\"remove-number-question\"\n                onClick={removeNumberOfQuestion}\n              >\n                <RemoveIcon />\n              </Fab>\n              <Typography\n                variant=\"h2\"\n                component=\"h3\"\n                data-testid=\"number-question\"\n              >\n                {numberOfQuestionsChosen}\n              </Typography>\n              <Fab\n                variant=\"extended\"\n                size=\"small\"\n                color=\"primary\"\n                aria-label=\"add\"\n                data-testid=\"add-number-question\"\n                onClick={addNumberOfQuestion}\n              >\n                <AddIcon />\n              </Fab>\n            </Grid>\n            <Button\n              data-testid=\"btn-start-question\"\n              className={classes.btnStartQuestion}\n              size=\"large\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={selectedNumber}\n            >\n              escolher quantidade\n            </Button>\n          </Grid>\n        </CardActions>\n      </Card>\n    </Box>\n  );\n};\n\nexport default HowManyQuestions;\n","import {\n  Box,\n  Card,\n  CardActions,\n  Button,\n  Grid,\n  makeStyles,\n} from '@material-ui/core';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles({\n  cardReviewReport: { backgroundColor: '#ededed !important' },\n  boxReviewReport: {\n    '@media(min-width: 900px)': {\n      width: '60vw !important',\n    },\n  },\n});\n\nconst ReviewReport = () => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const goLastReport = () => {\n    history.push('/report');\n  };\n\n  const showBtn = () => {\n    const lastReport = JSON.parse(localStorage.getItem('last-answers'));\n\n    if (lastReport === {} || lastReport === null) {\n      return (\n        <Grid container justifyContent=\"center\">\n          <Box width=\"90vw\" className={classes.boxReviewReport}>\n            <Card variant=\"outlined\" className={classes.cardReviewReport}>\n              <CardActions>\n                <Button\n                  fullWidth\n                  data-testid=\"btn-review-report\"\n                  size=\"large\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={goLastReport}\n                  disabled\n                >\n                  Rever último relatório\n                </Button>\n              </CardActions>\n            </Card>\n          </Box>\n        </Grid>\n      );\n    } else {\n      return (\n        <Grid container justifyContent=\"center\">\n          <Box width=\"90vw\" className={classes.boxReviewReport}>\n            <Card variant=\"outlined\" className={classes.cardReviewReport}>\n              <CardActions>\n                <Button\n                  fullWidth\n                  data-testid=\"btn-review-report\"\n                  size=\"large\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={goLastReport}\n                >\n                  Rever último relatório\n                </Button>\n              </CardActions>\n            </Card>\n          </Box>\n        </Grid>\n      );\n    }\n  };\n\n  return showBtn();\n};\n\nexport default ReviewReport;\n","import HowManyQuestions from '../components/how-many-questions';\nimport ReviewReport from '../components/review-report';\n\nconst HomePage = () => {\n  return (\n    <main>\n      <HowManyQuestions />\n      <ReviewReport />\n    </main>\n  );\n};\n\nexport default HomePage;\n","import {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  CardActions,\n  Button,\n  makeStyles,\n} from '@material-ui/core';\nimport axios from 'axios';\nimport { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { DataContext } from '../providers/data-context';\n\nconst useStyles = makeStyles({\n  btnStartCancel: {\n    marginTop: '1rem !important',\n  },\n  boxStartCancel: {\n    '@media(min-width: 900px)': {\n      width: '60vw !important',\n    },\n  },\n});\n\nconst StartQuest = () => {\n  const classes = useStyles();\n  const context = useContext(DataContext);\n  const history = useHistory();\n\n  const getDataApi = async (inOut) => {\n    if (inOut === false) return context.setQuestionsData([]);\n\n    const url = `https://opentdb.com/api.php?amount=${context.numberQuestions}`;\n    const data = await axios\n      .get(url)\n      .then(({ data }) => data.results)\n      .catch((e) => console.log(e));\n\n    context.setQuestionsData(data);\n  };\n\n  const saveInContext = async (inOut) => {\n    context.setStarted(inOut);\n  };\n\n  const btnStartQuests = async () => {\n    await getDataApi(true);\n    await saveInContext(true);\n    history.push('/quests');\n  };\n\n  const btnCancelQuests = () => {\n    getDataApi(false);\n    saveInContext(false);\n    history.push('/');\n  };\n\n  return (\n    <Box m=\"1rem\" width=\"90vw\" className={classes.boxStartCancel}>\n      <Card className={classes.btnStartCancel} variant=\"outlined\">\n        <CardContent>\n          <Typography align=\"center\" variant=\"h5\" component=\"h2\">\n            {context.numberQuestions} perguntas?\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Grid\n            container\n            direction=\"column\"\n            alignContent=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Grid\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"space-around\"\n            ></Grid>\n            <Button\n              data-testid=\"btn-start-quest\"\n              className={classes.btnStartCancel}\n              size=\"large\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={btnStartQuests}\n            >\n              start\n            </Button>\n            <Button\n              data-testid=\"btn-cancel-quest\"\n              className={classes.btnStartCancel}\n              size=\"large\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={btnCancelQuests}\n            >\n              cancel\n            </Button>\n          </Grid>\n        </CardActions>\n      </Card>\n    </Box>\n  );\n};\n\nexport default StartQuest;\n","import StartQuest from '../components/start-quest';\n\nconst StartQuestPage = () => {\n  return (\n    <main>\n      <StartQuest />\n    </main>\n  );\n};\n\nexport default StartQuestPage;\n","import { useContext } from 'react';\nimport { Redirect, Route } from 'react-router';\nimport { DataContext } from '../providers/data-context';\nimport StartQuestPage from '../pages/start-quest-page';\n\nconst StartQuestRoute = ({ ...rest }) => {\n  const context = useContext(DataContext);\n  const valid = context.numberQuestions > 0;\n\n  return (\n    <Route {...rest}>{valid ? StartQuestPage : <Redirect to=\"/\" />}</Route>\n  );\n};\n\nexport default StartQuestRoute;\n","import {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  Grid,\n  makeStyles,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  boxSendAnswers: {\n    marginTop: '0.5rem',\n    marginBottom: '1rem',\n    '@media(min-width: 900px)': {\n      width: '60vw !important',\n    },\n    cardSendAnswers: {\n      backgroundColor: '#ededed !important',\n    },\n  },\n});\n\nconst BtnSendAnswers = () => {\n  const classes = useStyles();\n\n  return (\n    <Grid container justifyContent=\"center\">\n      <Box width=\"90vw\" className={classes.boxSendAnswers}>\n        <Card variant=\"outlined\" className={classes.cardSendAnswers}>\n          <CardActions>\n            <Button\n              fullWidth\n              type=\"submit\"\n              data-testid=\"btn-send-answers\"\n              size=\"large\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Enviar respostas\n            </Button>\n          </CardActions>\n        </Card>\n      </Box>\n    </Grid>\n  );\n};\n\nexport default BtnSendAnswers;\n","const numberRandom = () => {\n  const min = 100000;\n  const max = 999999;\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\nexport default numberRandom;\n","const idFormater = (id) => {\n  id++;\n  if (id < 10) return `0${id}`;\n  if (id >= 10) return id;\n};\n\nexport default idFormater;\n","import {\n  Avatar,\n  Box,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  Radio,\n  RadioGroup,\n  Typography,\n  makeStyles,\n  FormLabel,\n} from '@material-ui/core';\nimport { useContext } from 'react';\nimport { DataContext } from '../providers/data-context';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router';\nimport BtnSendAnswers from './btn-send-answers';\nimport numberRandom from '../utils/number-random';\nimport idFormater from '../utils/number-formater';\n\nconst useStyles = makeStyles({\n  answerGrid: {\n    marginLeft: '1rem',\n    width: '100% !important',\n  },\n  answerRadioGroup: {\n    width: '100% !important',\n  },\n  cardQuestNumber: {\n    backgroundColor: '#ededed !important',\n  },\n  btnSendAnswers: {\n    margin: '1rem !important',\n    marginTop: '0.5rem !important',\n    marginBottom: '2rem !important',\n  },\n  avatarQuestion: {\n    backgroundColor: '#303f9f !important',\n  },\n  errorMsg: {\n    color: '#FF0000 !important',\n    textAlign: 'right !important',\n    width: '100% !important',\n  },\n  boxListQuestions: {\n    '@media(min-width: 900px)': {\n      width: '60vw !important',\n    },\n  },\n});\n\nconst Questions = () => {\n  const classes = useStyles();\n  const context = useContext(DataContext);\n  const history = useHistory();\n\n  const questionList = () => {\n    const quetionsList = {};\n\n    for (let index = 0; index < context.numberQuestions; index++) {\n      quetionsList[idFormater(index)] = '';\n    }\n\n    return quetionsList;\n  };\n\n  const formSubmit = (values) => {\n    localStorage.setItem(\n      'last-questions',\n      JSON.stringify(context.questionsData),\n    );\n    localStorage.setItem('last-answers', JSON.stringify(values));\n    history.push('/report');\n  };\n\n  const validateQuestion = (values) => {\n    let erros = {};\n\n    for (const key in values) {\n      if (values[key] === '') {\n        erros[key] = 'faltando';\n      }\n    }\n\n    return erros;\n  };\n\n  const listAnswersFormated = (question, questionID) => {\n    const correctAnswer = question['correct_answer'];\n    const incorrectAnswers = question['incorrect_answers'];\n    const answers = [correctAnswer, ...incorrectAnswers];\n    const answersSorted = answers.sort();\n\n    const answersFormated = answersSorted.map((answer, id) => {\n      return (\n        <FormControlLabel\n          control={<Radio color=\"primary\" />}\n          key={numberRandom()}\n          label={answer}\n          value={answer}\n          data-testid={`card-answer-question-${idFormater(\n            questionID,\n          )}-${idFormater(id)}`}\n        />\n      );\n    });\n\n    return answersFormated;\n  };\n\n  return (\n    <Formik\n      initialValues={{ ...questionList() }}\n      onSubmit={formSubmit}\n      validate={validateQuestion}\n    >\n      {(props) => (\n        <form onSubmit={props.handleSubmit}>\n          {context.questionsData.map((question, id) => (\n            <Grid\n              container\n              direction=\"row\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              key={numberRandom()}\n            >\n              <FormControl\n                component=\"fieldset\"\n                className={classes.questionFormated}\n              >\n                <Box m=\"1rem\" width=\"90vw\" className={classes.boxListQuestions}>\n                  <Card className={classes.cardQuestNumber} variant=\"outlined\">\n                    <CardHeader\n                      data-testid={`card-header-question-${idFormater(id)}`}\n                      avatar={\n                        <Avatar\n                          aria-label=\"recipe\"\n                          className={classes.avatarQuestion}\n                          data-testid={`card-avatar-question-${idFormater(id)}`}\n                        >\n                          {idFormater(id)}\n                        </Avatar>\n                      }\n                      title={\n                        'Difficulty: ' +\n                        `${question.difficulty}`.toLocaleUpperCase()\n                      }\n                      subheader={`${question.category}`}\n                    />\n\n                    <FormLabel component=\"legend\">\n                      <CardContent>\n                        <Typography\n                          color=\"textPrimary\"\n                          align=\"justify\"\n                          gutterBottom\n                          data-testid={`card-txt-question-${idFormater(id)}`}\n                        >\n                          {`${question.question}`}\n                        </Typography>\n                      </CardContent>\n                    </FormLabel>\n\n                    <CardActions>\n                      <Grid\n                        container\n                        direction=\"column\"\n                        alignItems=\"flex-start\"\n                        justifyContent=\"center\"\n                        className={classes.answerGrid}\n                      >\n                        <RadioGroup\n                          className={classes.answerRadioGroup}\n                          aria-label={idFormater(id)}\n                          onChange={(event) => {\n                            props.setFieldValue(\n                              idFormater(id),\n                              event.currentTarget.value,\n                            );\n                          }}\n                          onBlur={props.handleBlur}\n                          value={props.values[idFormater(id)]}\n                          name={idFormater(id)}\n                        >\n                          {listAnswersFormated(question, id)}\n                          {props.errors[idFormater(id)] &&\n                          props.touched[idFormater(id)] ? (\n                            <Typography\n                              color=\"textPrimary\"\n                              className={classes.errorMsg}\n                              gutterBottom\n                              data-testid={`card-error-question-${idFormater(\n                                id,\n                              )}`}\n                            >\n                              Precisa ser respondido\n                            </Typography>\n                          ) : null}\n                        </RadioGroup>\n                      </Grid>\n                    </CardActions>\n                  </Card>\n                </Box>\n              </FormControl>\n            </Grid>\n          ))}\n          <BtnSendAnswers />\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default Questions;\n","import Questions from '../components/questions-formik';\n\nconst QuestionsPage = () => {\n  return (\n    <main>\n      <Questions />\n    </main>\n  );\n};\n\nexport default QuestionsPage;\n","import { useContext } from 'react';\nimport { Redirect, Route } from 'react-router';\nimport { DataContext } from '../providers/data-context';\nimport QuestionsPage from '../pages/questions-page';\n\nconst QuestsRoute = ({ ...rest }) => {\n  const context = useContext(DataContext);\n  const valid = context.started;\n\n  return <Route {...rest}>{valid ? QuestionsPage : <Redirect to=\"/\" />}</Route>;\n};\n\nexport default QuestsRoute;\n","import {\n  Box,\n  Card,\n  CardContent,\n  Grid,\n  makeStyles,\n  Typography,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  showPonctuations: {\n    marginTop: '1rem !important',\n    backgroundColor: '#ededed !important',\n  },\n  boxShowPonctuantions: {\n    '@media(min-width: 900px)': {\n      width: '60vw !important',\n    },\n  },\n  correctPoints: {\n    color: 'green',\n  },\n  wrongPoints: {\n    color: 'red',\n  },\n});\n\nconst ShowPonctuations = () => {\n  const classes = useStyles();\n\n  const correctPoints = JSON.parse(localStorage.getItem('correct-punctuation'));\n  const wrongPoints = JSON.parse(localStorage.getItem('wrong-punctuation'));\n\n  return (\n    <Box m=\"1rem\" width=\"90vw\" className={classes.boxShowPonctuantions}>\n      <Card className={classes.showPonctuations} variant=\"outlined\">\n        <CardContent>\n          <Grid\n            container\n            direction=\"row\"\n            alignContent=\"center\"\n            justifyContent=\"space-evenly\"\n          >\n            <Typography\n              className={classes.correctPoints}\n              align=\"center\"\n              variant=\"h5\"\n              component=\"h3\"\n              data-testid=\"max-correct-questions\"\n            >\n              Acertos: {correctPoints}\n            </Typography>\n            <Typography\n              className={classes.wrongPoints}\n              align=\"center\"\n              variant=\"h5\"\n              component=\"h3\"\n              data-testid=\"max-wrong-questions\"\n            >\n              Erros: {wrongPoints}\n            </Typography>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n\nexport default ShowPonctuations;\n","import {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  Grid,\n  makeStyles,\n} from '@material-ui/core';\nimport { useHistory } from 'react-router';\n\nconst useStyles = makeStyles({\n  boxReturnInit: {\n    marginTop: '0.5rem',\n    marginBottom: '1rem',\n    '@media(min-width: 900px)': {\n      width: '60vw !important',\n    },\n    cardReturnInit: {\n      backgroundColor: '#ededed !important',\n    },\n  },\n});\n\nconst BtnReturnInit = () => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const returnInit = () => {\n    history.push('/');\n  };\n\n  return (\n    <Grid container justifyContent=\"center\">\n      <Box width=\"90vw\" className={classes.boxReturnInit}>\n        <Card variant=\"outlined\" className={classes.cardReturnInit}>\n          <CardActions>\n            <Button\n              fullWidth\n              type=\"submit\"\n              data-testid=\"btn-send-answers\"\n              size=\"large\"\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={returnInit}\n            >\n              Retornar ao começo\n            </Button>\n          </CardActions>\n        </Card>\n      </Box>\n    </Grid>\n  );\n};\n\nexport default BtnReturnInit;\n","import {\n  Avatar,\n  Box,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Grid,\n  RadioGroup,\n  Typography,\n  makeStyles,\n  FormLabel,\n} from '@material-ui/core';\nimport numberRandom from '../utils/number-random';\nimport idFormater from '../utils/number-formater';\nimport CheckIcon from '@material-ui/icons/Check';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\nimport ShowPonctuations from './show-ponctuations';\nimport BtnReturnInit from './btn-return-init';\n\nconst useStyles = makeStyles({\n  answerGrid: {\n    marginLeft: '1rem',\n    width: '100% !important',\n  },\n  cardQuestNumber: {\n    backgroundColor: '#ededed !important',\n  },\n  avatarQuestion: {\n    backgroundColor: '#303f9f !important',\n  },\n  boxListQuestions: {\n    '@media(min-width: 900px)': {\n      width: '60vw !important',\n    },\n  },\n  wrongAnswer: {\n    color: 'red !important',\n    display: 'flex',\n  },\n  correctAnswer: {\n    color: 'green !important',\n    display: 'flex',\n  },\n  icon: {\n    marginRight: '0.25rem',\n  },\n});\n\nconst ReportQuestions = () => {\n  const classes = useStyles();\n\n  const questionsLoad = JSON.parse(localStorage.getItem('last-questions'));\n  const answersLoad = JSON.parse(localStorage.getItem('last-answers'));\n\n  let acertos = 0;\n  let erros = 0;\n\n  questionsLoad.forEach((question, id) => {\n    const correctAnswer = question['correct_answer'];\n\n    if (correctAnswer === answersLoad[idFormater(id)]) {\n      acertos += 1;\n    } else {\n      erros += 1;\n    }\n  });\n\n  localStorage.setItem('correct-punctuation', JSON.stringify(acertos));\n  localStorage.setItem('wrong-punctuation', JSON.stringify(erros));\n\n  const listAnswersFormated = (question, questionID) => {\n    const correctAnswer = question['correct_answer'];\n    const incorrectAnswers = question['incorrect_answers'];\n    const answers = [correctAnswer, ...incorrectAnswers];\n    const answersSorted = answers.sort();\n\n    const answersFormated = answersSorted.map((answer, answerID) => {\n      if (\n        answer === answersLoad[idFormater(questionID)] &&\n        answer === correctAnswer\n      ) {\n        return (\n          <Typography\n            className={classes.correctAnswer}\n            color=\"textSecondary\"\n            align=\"justify\"\n            key={numberRandom()}\n            gutterBottom\n            data-testid={`correct-answer-${idFormater(questionID)}-${idFormater(\n              answerID,\n            )}`}\n          >\n            <CheckIcon\n              className={classes.icon}\n              data-testid={`correct-icon-${idFormater(questionID)}-${idFormater(\n                answerID,\n              )}`}\n            />\n            {answer}\n          </Typography>\n        );\n      }\n\n      if (answer === answersLoad[idFormater(questionID)]) {\n        return (\n          <Typography\n            className={classes.wrongAnswer}\n            color=\"textSecondary\"\n            align=\"justify\"\n            key={numberRandom()}\n            gutterBottom\n            data-testid={`wrong-answer-${idFormater(questionID)}-${idFormater(\n              answerID,\n            )}`}\n          >\n            <NotInterestedIcon\n              className={classes.icon}\n              data-testid={`wrong-icon-${idFormater(questionID)}-${idFormater(\n                answerID,\n              )}`}\n            />\n            {answer}\n          </Typography>\n        );\n      }\n\n      if (answer === correctAnswer) {\n        return (\n          <Typography\n            className={classes.correctAnswer}\n            color=\"textSecondary\"\n            align=\"justify\"\n            key={numberRandom()}\n            gutterBottom\n            data-testid={`correct-no-selected-answer-${idFormater(\n              questionID,\n            )}-${idFormater(answerID)}`}\n          >\n            {answer}\n          </Typography>\n        );\n      }\n\n      return (\n        <Typography\n          color=\"textSecondary\"\n          align=\"justify\"\n          gutterBottom\n          key={numberRandom()}\n          data-testid={`no-selected-answer-${idFormater(\n            questionID,\n          )}-${idFormater(answerID)}`}\n        >\n          {answer}\n        </Typography>\n      );\n    });\n\n    return answersFormated;\n  };\n\n  const questions = questionsLoad.map((question, id) => {\n    return (\n      <Grid\n        container\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        key={numberRandom()}\n      >\n        <Box m=\"1rem\" width=\"90vw\" className={classes.boxListQuestions}>\n          <Card className={classes.cardQuestNumber} variant=\"outlined\">\n            <CardHeader\n              data-testid={`card-header-question-${idFormater(id)}`}\n              avatar={\n                <Avatar\n                  data-testid={`card-avatar-question-${idFormater(id)}`}\n                  aria-label={`question-avatar-${idFormater(id)}`}\n                  className={classes.avatarQuestion}\n                >\n                  {idFormater(id)}\n                </Avatar>\n              }\n              title={\n                'Difficulty: ' + `${question.difficulty}`.toLocaleUpperCase()\n              }\n              subheader={`${question.category}`}\n            />\n\n            <FormLabel component=\"legend\">\n              <CardContent>\n                <Typography\n                  data-testid={`card-txt-question-${idFormater(id)}`}\n                  color=\"textPrimary\"\n                  align=\"justify\"\n                  gutterBottom\n                >\n                  {`${question.question}`}\n                </Typography>\n              </CardContent>\n            </FormLabel>\n\n            <CardActions>\n              <Grid\n                container\n                direction=\"column\"\n                alignItems=\"flex-start\"\n                justifyContent=\"center\"\n                className={classes.answerGrid}\n              >\n                <RadioGroup className={classes.answerRadioGroup}>\n                  {listAnswersFormated(question, id)}\n                </RadioGroup>\n              </Grid>\n            </CardActions>\n          </Card>\n        </Box>\n      </Grid>\n    );\n  });\n\n  return (\n    <section>\n      <ShowPonctuations />\n      {questions}\n      <BtnReturnInit />\n    </section>\n  );\n};\n\nexport default ReportQuestions;\n","import ReportQuestions from '../components/report-questions';\n\nconst ReportPage = () => {\n  return (\n    <main>\n      <ReportQuestions />\n    </main>\n  );\n};\n\nexport default ReportPage;\n","import { Redirect, Route } from 'react-router';\nimport ReportPage from '../pages/report-page';\n\nconst ReportRoute = ({ ...rest }) => {\n  const answers = JSON.parse(localStorage.getItem('last-answers'));\n  const questions = JSON.parse(localStorage.getItem('last-questions'));\n  const valid = answers !== null && questions !== null;\n\n  return <Route {...rest}>{valid ? ReportPage : <Redirect to='/' />}</Route>;\n};\n\nexport default ReportRoute;\n","import { Switch, Route, Redirect, HashRouter } from 'react-router-dom';\nimport { DataProvider } from './providers/data-context';\n\nimport HomePage from './pages/home-page';\n\nimport StartQuestRoute from './routes/start-quest-route';\nimport QuestsRoute from './routes/questions-route';\nimport ReportRoute from './routes/report-route';\n\nconst Routes = () => {\n  return (\n    <DataProvider>\n      <HashRouter>\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <StartQuestRoute exact path='/start' />\n          <QuestsRoute exact path='/quests' />\n          <ReportRoute exact path='/report' />\n\n          <Route path='*'>\n            <Redirect to='/' />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </DataProvider>\n  );\n};\nexport default Routes;\n","import { Grid } from '@material-ui/core';\nimport './App.css';\nimport HomeTitle from './components/home-title';\nimport Routes from './routes';\n\nfunction App() {\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"space-evenly\"\n      style={{ minHeight: '100vh' }}\n    >\n      <HomeTitle />\n      <Routes />\n    </Grid>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}