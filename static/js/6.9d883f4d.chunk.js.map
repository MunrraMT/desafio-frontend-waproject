{"version":3,"sources":["utils/number-random.js","utils/number-formater.js","components/btn-send-answers.js","components/questions-formik.js"],"names":["numberRandom","min","Math","floor","random","idFormater","id","useStyles","makeStyles","boxSendAnswers","marginTop","marginBottom","width","cardSendAnswers","backgroundColor","BtnSendAnswers","classes","Grid","container","justifyContent","Box","className","Card","variant","CardActions","Button","fullWidth","type","data-testid","size","color","answerGrid","marginLeft","answerRadioGroup","cardQuestNumber","btnSendAnswers","margin","avatarQuestion","errorMsg","textAlign","boxListQuestions","Questions","context","useContext","DataContext","history","useHistory","listAnswersFormated","question","questionID","correctAnswer","incorrectAnswers","sort","map","answer","FormControlLabel","control","Radio","label","value","initialValues","quetionsList","index","numberQuestions","questionList","onSubmit","values","localStorage","setItem","JSON","stringify","questionsData","push","validate","erros","key","props","handleSubmit","direction","alignItems","FormControl","component","questionFormated","m","CardHeader","avatar","Avatar","aria-label","title","difficulty","toLocaleUpperCase","subheader","category","FormLabel","CardContent","Typography","align","gutterBottom","RadioGroup","onChange","event","setFieldValue","currentTarget","onBlur","handleBlur","name","errors","touched"],"mappings":"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","file":"static/js/6.9d883f4d.chunk.js","sourcesContent":["const numberRandom = () => {\n  const min = 100000;\n  const max = 999999;\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\nexport default numberRandom;\n","const idFormater = (id) => {\n  id++;\n  if (id < 10) return `0${id}`;\n  if (id >= 10) return id;\n};\n\nexport default idFormater;\n","import {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  Grid,\n  makeStyles,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  boxSendAnswers: {\n    marginTop: '0.5rem',\n    marginBottom: '1rem',\n    '@media(min-width: 900px)': {\n      width: '60vw !important',\n    },\n    cardSendAnswers: {\n      backgroundColor: '#ededed !important',\n    },\n  },\n});\n\nconst BtnSendAnswers = () => {\n  const classes = useStyles();\n\n  return (\n    <Grid container justifyContent=\"center\">\n      <Box width=\"90vw\" className={classes.boxSendAnswers}>\n        <Card variant=\"outlined\" className={classes.cardSendAnswers}>\n          <CardActions>\n            <Button\n              fullWidth\n              type=\"submit\"\n              data-testid=\"btn-send-answers\"\n              size=\"large\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Enviar respostas\n            </Button>\n          </CardActions>\n        </Card>\n      </Box>\n    </Grid>\n  );\n};\n\nexport default BtnSendAnswers;\n","import {\n  Avatar,\n  Box,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  Radio,\n  RadioGroup,\n  Typography,\n  makeStyles,\n  FormLabel\n} from '@material-ui/core';\nimport { useContext } from 'react';\nimport { DataContext } from '../providers/data-context';\nimport { Formik } from 'formik';\nimport { useHistory } from 'react-router';\nimport BtnSendAnswers from './btn-send-answers';\nimport numberRandom from '../utils/number-random';\nimport idFormater from '../utils/number-formater';\n\nconst useStyles = makeStyles({\n  answerGrid: {\n    marginLeft: '1rem',\n    width: '100% !important'\n  },\n  answerRadioGroup: {\n    width: '100% !important'\n  },\n  cardQuestNumber: {\n    backgroundColor: '#ededed !important'\n  },\n  btnSendAnswers: {\n    margin: '1rem !important',\n    marginTop: '0.5rem !important',\n    marginBottom: '2rem !important'\n  },\n  avatarQuestion: {\n    backgroundColor: '#303f9f !important'\n  },\n  errorMsg: {\n    color: '#FF0000 !important',\n    textAlign: 'right !important',\n    width: '100% !important'\n  },\n  boxListQuestions: {\n    '@media(min-width: 900px)': {\n      width: '60vw !important'\n    }\n  }\n});\n\nconst Questions = () => {\n  const classes = useStyles();\n  const context = useContext(DataContext);\n  const history = useHistory();\n\n  const questionList = () => {\n    const quetionsList = {};\n\n    for (let index = 0; index < context.numberQuestions; index++) {\n      quetionsList[idFormater(index)] = '';\n    }\n\n    return quetionsList;\n  };\n\n  const formSubmit = (values) => {\n    localStorage.setItem(\n      'last-questions',\n      JSON.stringify(context.questionsData)\n    );\n    localStorage.setItem('last-answers', JSON.stringify(values));\n    history.push('/report');\n  };\n\n  const validateQuestion = (values) => {\n    let erros = {};\n\n    for (const key in values) {\n      if (values[key] === '') {\n        erros[key] = 'faltando';\n      }\n    }\n\n    return erros;\n  };\n\n  const listAnswersFormated = (question, questionID) => {\n    const correctAnswer = question['correct_answer'];\n    const incorrectAnswers = question['incorrect_answers'];\n    const answers = [correctAnswer, ...incorrectAnswers];\n    const answersSorted = answers.sort();\n\n    const answersFormated = answersSorted.map((answer, id) => {\n      return (\n        <FormControlLabel\n          control={<Radio color='primary' />}\n          key={numberRandom()}\n          label={answer}\n          value={answer}\n          data-testid={`card-answer-question-${idFormater(\n            questionID\n          )}-${idFormater(id)}`}\n        />\n      );\n    });\n\n    return answersFormated;\n  };\n\n  return (\n    <Formik\n      initialValues={{ ...questionList() }}\n      onSubmit={formSubmit}\n      validate={validateQuestion}\n    >\n      {(props) => (\n        <form onSubmit={props.handleSubmit}>\n          {context.questionsData.map((question, id) => (\n            <Grid\n              container\n              direction='row'\n              alignItems='center'\n              justifyContent='center'\n              key={numberRandom()}\n            >\n              <FormControl\n                component='fieldset'\n                className={classes.questionFormated}\n              >\n                <Box m='1rem' width='90vw' className={classes.boxListQuestions}>\n                  <Card className={classes.cardQuestNumber} variant='outlined'>\n                    <CardHeader\n                      data-testid={`card-header-question-${idFormater(id)}`}\n                      avatar={\n                        <Avatar\n                          aria-label='recipe'\n                          className={classes.avatarQuestion}\n                          data-testid={`card-avatar-question-${idFormater(id)}`}\n                        >\n                          {idFormater(id)}\n                        </Avatar>\n                      }\n                      title={\n                        'Difficulty: ' +\n                        `${question.difficulty}`.toLocaleUpperCase()\n                      }\n                      subheader={`${question.category}`}\n                    />\n\n                    <FormLabel component='legend'>\n                      <CardContent>\n                        <Typography\n                          color='textPrimary'\n                          align='justify'\n                          gutterBottom\n                          data-testid={`card-txt-question-${idFormater(id)}`}\n                        >\n                          {`${question.question}`}\n                        </Typography>\n                      </CardContent>\n                    </FormLabel>\n\n                    <CardActions>\n                      <Grid\n                        container\n                        direction='column'\n                        alignItems='flex-start'\n                        justifyContent='center'\n                        className={classes.answerGrid}\n                      >\n                        <RadioGroup\n                          className={classes.answerRadioGroup}\n                          aria-label={idFormater(id)}\n                          onChange={(event) => {\n                            props.setFieldValue(\n                              idFormater(id),\n                              event.currentTarget.value\n                            );\n                          }}\n                          onBlur={props.handleBlur}\n                          value={props.values[idFormater(id)]}\n                          name={`answers-${idFormater(id)}`}\n                        >\n                          {listAnswersFormated(question, id)}\n                          {props.errors[idFormater(id)] &&\n                          props.touched[idFormater(id)] ? (\n                            <Typography\n                              color='textPrimary'\n                              className={classes.errorMsg}\n                              gutterBottom\n                              data-testid={`card-error-question-${idFormater(\n                                id\n                              )}`}\n                            >\n                              Precisa ser respondido\n                            </Typography>\n                          ) : null}\n                        </RadioGroup>\n                      </Grid>\n                    </CardActions>\n                  </Card>\n                </Box>\n              </FormControl>\n            </Grid>\n          ))}\n          <BtnSendAnswers />\n        </form>\n      )}\n    </Formik>\n  );\n};\n\nexport default Questions;\n"],"sourceRoot":""}